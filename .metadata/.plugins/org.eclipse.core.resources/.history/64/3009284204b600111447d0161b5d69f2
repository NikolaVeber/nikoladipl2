package gov.nasa.jpf.symbc.sequences;

import java.io.File;
import java.io.IOException;
import java.util.BitSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;

import gov.nasa.jpf.Config;
import gov.nasa.jpf.JPF;
import gov.nasa.jpf.jvm.AnnotationInfo;
import gov.nasa.jpf.jvm.ClassInfo;
import gov.nasa.jpf.jvm.ExceptionHandler;
import gov.nasa.jpf.jvm.JVM;
import gov.nasa.jpf.jvm.MethodInfo;
import gov.nasa.jpf.jvm.NoClassInfoException;
import gov.nasa.jpf.jvm.ThreadInfo;
import gov.nasa.jpf.jvm.bytecode.GOTO;
import gov.nasa.jpf.jvm.bytecode.IfInstruction;
import gov.nasa.jpf.jvm.bytecode.Instruction;
import gov.nasa.jpf.jvm.bytecode.InvokeInstruction;
import gov.nasa.jpf.jvm.bytecode.ReturnInstruction;
import gov.nasa.jpf.report.ConsolePublisher;
import gov.nasa.jpf.report.HTMLPublisher;
import gov.nasa.jpf.search.Search;
import gov.nasa.jpf.symbc.sequences.CoverageAnalyzer.Coverage;
import gov.nasa.jpf.symbc.sequences.CoverageAnalyzer.MethodCoverage;

import gov.nasa.jpf.util.StringSetMatcher;

public class PathCoverageAnalyzer {
	  static class Coverage {

		    int total;
		    int covered;

		    Coverage(int total, int covered) {
		      this.total = total;
		      this.covered = covered;
		    }

		    public void add(Coverage cov) {
		      total += cov.total;
		      covered += cov.covered;
		    }

		    public int percent() {
		      if (total > 0) {
		        return covered * 100 / total;
		      }

		      return (Integer.MIN_VALUE);
		    }

		    public int covered() {
		      return covered;
		    }

		    public int total() {
		      return total;
		    }

		    public boolean isPartiallyCovered() {
		      return ((covered > 0) && (covered < total));
		    }

		    public boolean isNotCovered() {
		      return (covered == 0);
		    }

		    public boolean isFullyCovered() {
		      return (covered == total);
		    }
		  }

	  StringSetMatcher includes = null; //  means all
	  StringSetMatcher excludes = null; //  means none
	  StringSetMatcher loaded;
	  static boolean loadedOnly; // means we only check loaded classes that are not filtered
	  static boolean showMethods;      // do we want to show per-method coverage?
	  static boolean showMethodBodies;
	  static boolean excludeHandlers;  // do we count the handlers in? (off-nominal CF)
	  static boolean showBranchCoverage; // makes only sense with showMethods
	  static boolean showRequirements; // report requirements coverage
	  //HashMap<String, ClassCoverage> classes = new HashMap<String, ClassCoverage>();
	  
	  
	  
	  static class MethodCoverage {

		    MethodInfo mi;

		    // we base everything else on bytecode instruction coverage
		    BitSet[] covered;
		    BitSet basicBlocks; // set on demand
		    BitSet handlers; // set on demand
		    BitSet branches; // set on demand
		    BitSet branchTrue;
		    BitSet branchFalse;

		    MethodCoverage(MethodInfo mi) {
		      this.mi = mi;
		      System.out.println("add method: " + mi.getUniqueName());
		    }

		    MethodInfo getMethodInfo() {
		      return mi;
		    }

		    void setExecuted(ThreadInfo ti, Instruction insn) {
		      int idx = ti.getId();

		      if (covered == null) {
		        covered = new BitSet[idx + 1];
		      } else if (idx >= covered.length) {
		        BitSet[] a = new BitSet[idx + 1];
		        System.arraycopy(covered, 0, a, 0, covered.length);
		        covered = a;
		      }

		      if (covered[idx] == null) {
		        covered[idx] = new BitSet(mi.getInstructions().length);
		      }

		      int off = insn.getInstructionIndex();
		      covered[idx].set(off);

		      if (showBranchCoverage && (insn instanceof IfInstruction)) {
		        if (branchTrue == null) {
		          branchTrue = new BitSet(mi.getInstructions().length);
		          branchFalse = new BitSet(branchTrue.size());
		        }
		        if (!((IfInstruction) insn).getConditionValue()) {
		          branchTrue.set(off);
		        } else {
		          branchFalse.set(off);
		        }
		      }
		    }

		    void setCGed(ThreadInfo ti, Instruction insn) {
		      ti = null;  // Remove IDE warning about unused variable.
		      // Hmm, we have to store the bb set at this point
		      BitSet bb = getBasicBlocks();
		      Instruction next = insn.getNext();
		      if (next != null) { // insn might be a sync return
		        bb.set(next.getInstructionIndex());
		      }
		    }

		    BitSet getExecutedInsn() {
		      int nTotal = mi.getInstructions().length;
		      BitSet bUnion = new BitSet(nTotal);

		      if (covered != null) {
		        for (BitSet b : covered) {
		          if (b != null) {
		            bUnion.or(b);
		          }
		        }
		      }

		      return bUnion;
		    }

		    Coverage getCoveredInsn() {
		      int nTotal = mi.getInstructions().length;

		      if (excludeHandlers) {
		        nTotal -= getHandlers().cardinality();
		      }

		      if (covered != null) {
		        BitSet bExec = getExecutedInsn();
		        if (excludeHandlers) {
		          bExec.andNot(getHandlers());
		        }
		        return new Coverage(nTotal, bExec.cardinality());
		      } else {
		        return new Coverage(nTotal, 0);
		      }
		    }

		    Coverage getCoveredLines() {
		      BitSet executable = new BitSet();
		      BitSet covered = new BitSet();

		      getCoveredLines(executable, covered);

		      return new Coverage(executable.cardinality(), covered.cardinality());
		    }

		    boolean getCoveredLines(BitSet executable, BitSet covered) {
		      Instruction inst[] = mi.getInstructions();
		      BitSet insn;
		      int i, line;

		      if (covered == null) {
		        return false;
		      }

		      insn = getExecutedInsn();
		      if (excludeHandlers) {
		        insn.andNot(getHandlers());
		      }

		      if (branchTrue != null) {
		        for (i = branchTrue.length() - 1; i >= 0; i--) {
		          boolean cTrue = branchTrue.get(i);
		          boolean cFalse = branchFalse.get(i);

		          if ((!cTrue || !cFalse) && (inst[i] instanceof IfInstruction)) {
		            insn.clear(i);
		          }
		        }
		      }

		      for (i = inst.length - 1; i >= 0; i--) {
		        line = inst[i].getLineNumber();
		         
		        if (line > 0) {
		          executable.set(line);
		          covered.set(line);
		        }
		      }

		      for (i = inst.length - 1; i >= 0; i--) {
		        line = inst[i].getLineNumber();
		        if ((!insn.get(i)) && (line > 0)) {         // TODO What do we do with instructions that don't have a line number.  Is this even possible?
		          covered.clear(line);
		        }
		      }

		      return true;
		    }

		    Coverage getCoveredBranches() {
		      BitSet b = getBranches();
		      int nTotal = b.cardinality();
		      int nCovered = 0;

		      if (branchTrue != null) {
		        int n = branchTrue.size();

		        for (int i = 0; i < n; i++) {
		          boolean cTrue = branchTrue.get(i);
		          boolean cFalse = branchFalse.get(i);

		          if (cTrue && cFalse) {
		            nCovered++;
		          }
		        }
		      }

		      return new Coverage(nTotal, nCovered);
		    }

		    BitSet getHandlerStarts() {
		      BitSet b = new BitSet(mi.getInstructions().length);
		      ExceptionHandler[] handler = mi.getExceptions();

		      if (handler != null) {
		        for (int i = 0; i < handler.length; i++) {
		          Instruction hs = mi.getInstructionAt(handler[i].getHandler());
		          b.set(hs.getInstructionIndex());
		        }
		      }

		      return b;
		    }

		    BitSet getHandlers() {
		      // this algorithm is a bit subtle - we walk through the code until
		      // we hit a forward GOTO (or RETURN). If the insn following the goto is the
		      // beginning of a handler, we mark everything up to the jump address
		      // as a handler block

		      if (handlers == null) {
		        BitSet hs = getHandlerStarts();
		        Instruction[] code = mi.getInstructions();
		        BitSet b = new BitSet(code.length);

		        if (!hs.isEmpty()) {
		          for (int i = 0; i < code.length; i++) {
		            Instruction insn = code[i];
		            if (insn instanceof GOTO) {
		              GOTO gotoInsn = (GOTO) insn;
		              if (!gotoInsn.isBackJump() && hs.get(i + 1)) { // jump around handler
		                int handlerEnd = gotoInsn.getTarget().getInstructionIndex();
		                for (i++; i < handlerEnd; i++) {
		                  b.set(i);
		                }
		              }
		            } else if (insn instanceof ReturnInstruction) { // everything else is handler
		              for (i++; i < code.length; i++) {
		                b.set(i);
		              }
		            }
		          }
		        }

		        handlers = b;
		      }

		      return handlers;
		    }

		    // that's kind of redundant with basic blocks, but not really - here
		    // we are interested in the logic behind branches, i.e. we want to know
		    // what the condition values were. We are not interested in GOTOs and exceptions
		    BitSet getBranches() {
		      if (branches == null) {
		        Instruction[] code = mi.getInstructions();
		        BitSet br = new BitSet(code.length);

		        for (int i = 0; i < code.length; i++) {
		          Instruction insn = code[i];
		          if (insn instanceof IfInstruction) {
		            br.set(i);
		          }
		        }

		        branches = br;
		      }

		      return branches;
		    }

		    BitSet getBasicBlocks() {
		      if (basicBlocks == null) {
		        Instruction[] code = mi.getInstructions();
		        BitSet bb = new BitSet(code.length);

		        bb.set(0); // first insn is always a bb start

		        // first, look at the insn type
		        for (int i = 0; i < code.length; i++) {
		          Instruction insn = code[i];
		          if (insn instanceof IfInstruction) {
		            IfInstruction ifInsn = (IfInstruction) insn;

		            Instruction tgt = ifInsn.getTarget();
		            bb.set(tgt.getInstructionIndex());

		            tgt = ifInsn.getNext();
		            bb.set(tgt.getInstructionIndex());
		          } else if (insn instanceof GOTO) {
		            Instruction tgt = ((GOTO) insn).getTarget();
		            bb.set(tgt.getInstructionIndex());
		          } else if (insn instanceof InvokeInstruction) {
		            // hmm, this might be a bit too conservative, but who says we
		            // don't jump out of a caller into a handler, or even that we
		            // ever return from the call?
		            Instruction tgt = insn.getNext();
		            bb.set(tgt.getInstructionIndex());
		          }
		        }

		        // and now look at the handlers (every first insn is a bb start)
		        ExceptionHandler[] handlers = mi.getExceptions();
		        if (handlers != null) {
		          for (int i = 0; i < handlers.length; i++) {
		            Instruction tgt = mi.getInstructionAt(handlers[i].getHandler());
		            bb.set(tgt.getInstructionIndex());
		          }
		        }

		        basicBlocks = bb;

		      /** dump
		      System.out.println();
		      System.out.println(mi.getFullName());
		      for (int i=0; i<code.length; i++) {
		      System.out.print(String.format("%1$2d %2$c ",i, bb.get(i) ? '>' : ' '));
		      System.out.println(code[i]);
		      }
		       **/
		      }

		      return basicBlocks;
		    }

		    Coverage getCoveredBasicBlocks() {
		      BitSet bExec = getExecutedInsn();
		      BitSet bb = getBasicBlocks();
		      int nCov = 0;

		      if (excludeHandlers) {
		        BitSet handlers = getHandlers();
		        bb.and(handlers);
		      }

		      if (bExec != null) {
		        BitSet bCov = new BitSet(bb.size());
		        bCov.or(bb);
		        bCov.and(bExec);
		        nCov = bCov.cardinality();
		      }

		      return new Coverage(bb.cardinality(), nCov);
		    }
		  }
	  
	  static class ClassCoverage {

		    String className; // need to store since we never might get a ClassInfo
		    ClassInfo ci;     // not initialized before the class is loaded
		    boolean covered;
		    HashMap<MethodInfo, MethodCoverage> methods;

		    ClassCoverage(String className) {
		      this.className = className;
		    }

		    void setLoaded(ClassInfo ci) {
		      if (methods == null) {
		        this.ci = ci;
		        covered = true;
		        System.out.println("used class: " + className);

		        methods = new HashMap<MethodInfo, MethodCoverage>();
		        for (MethodInfo mi : ci.getDeclaredMethodInfos()) {
		          // <2do> what about MJI methods? we should report why we don't cover them
		          if (!mi.isNative() && !mi.isAbstract()) {
		            MethodCoverage mc = new MethodCoverage(mi);
		            methods.put(mi, mc);
		          }
		        }
		      }
		    }

		    boolean isInterface() {
		      if (ci == null)           // never loaded
		        if (!isCodeLoaded())    // can it be loaded?
		          return false;         // will never load

		      return ci.isInterface();
		    }
		    
		    boolean isCodeLoaded() {
		      if (ci != null)
		        return true;

		      try {
		        ci = ClassInfo.getResolvedClassInfo(className);
		      } catch (NoClassInfoException e) {
		    	  System.out.println("CoverageAnalyzer problem: " + e);   // Just log the problem but don't fail.  We still want the report to be written.
		      }
		      
		      return ci != null;
		    }

		    MethodCoverage getMethodCoverage(MethodInfo mi) {
		      if (methods == null) {
		        setLoaded(ci);
		      }
		      return methods.get(mi);
		    }

		    Coverage getCoveredMethods() {
		      Coverage cov = new Coverage(0, 0);

		      if (methods != null) {
		        cov.total = methods.size();

		        for (MethodCoverage mc : methods.values()) {
		          if (mc.covered != null) {
		            cov.covered++;
		          }
		        }
		      }

		      return cov;
		    }

		    Coverage getCoveredInsn() {
		      Coverage cov = new Coverage(0, 0);

		      if (methods != null) {
		        for (MethodCoverage mc : methods.values()) {
		          Coverage c = mc.getCoveredInsn();
		          cov.total += c.total;
		          cov.covered += c.covered;
		        }
		      }

		      return cov;
		    }

		    boolean getCoveredLines(BitSet executable, BitSet covered) {
		      boolean result = false;

		      if (methods == null) {
		        return false;
		      }

		      for (MethodCoverage mc : methods.values()) {
		        result = mc.getCoveredLines(executable, covered) || result;
		      }

		      return result;
		    }

		    Coverage getCoveredLines() {
		      BitSet executable = new BitSet();
		      BitSet covered = new BitSet();

		      getCoveredLines(executable, covered);

		      return new Coverage(executable.cardinality(), covered.cardinality());
		    }

		    Coverage getCoveredBasicBlocks() {
		      Coverage cov = new Coverage(0, 0);

		      if (methods != null) {
		        for (MethodCoverage mc : methods.values()) {
		          Coverage c = mc.getCoveredBasicBlocks();
		          cov.total += c.total;
		          cov.covered += c.covered;
		        }
		      }

		      return cov;
		    }

		    Coverage getCoveredBranches() {
		      Coverage cov = new Coverage(0, 0);

		      if (methods != null) {
		        for (MethodCoverage mc : methods.values()) {
		          Coverage c = mc.getCoveredBranches();
		          cov.total += c.total;
		          cov.covered += c.covered;
		        }
		      }

		      return cov;
		    }
		  }
  
	  public PathCoverageAnalyzer(Config conf, JPF jpf) {
	      System.out.println("symbc.coverage");

	    includes = StringSetMatcher.getNonEmpty(conf.getStringArray("coverage.include"));
	    excludes = StringSetMatcher.getNonEmpty(conf.getStringArray("coverage.exclude"));

	    showMethods = conf.getBoolean("coverage.show_methods", false);
	    showMethodBodies = conf.getBoolean("coverage.show_bodies", false);
	    excludeHandlers = conf.getBoolean("coverage.exclude_handlers", false);
	    showBranchCoverage = conf.getBoolean("coverage.show_branches", true);
	    loadedOnly = conf.getBoolean("coverage.loaded_only", true);
	    showRequirements = conf.getBoolean("coverage.show_requirements", false);

	    if (!loadedOnly) {
	      getCoverageCandidates(); // this might take a little while
	    }
	  }

	  void getCoverageCandidates() {

		    // doesn't matter in which order we process this, since we
		    // just store one entry per qualified class name (i.e. there won't be
		    // multiple entries)
		    // NOTE : this doesn't yet deal with ClassLoaders, but that's also true for BCEL
		    for (String s : ClassInfo.getClassPathElements()) {
		      System.out.println("analyzing classpath element: " + s);
		      File f = new File(s);
		      if (f.exists()) {
		        if (f.isDirectory()) {
		          traverseDir(f, null);
		        } else if (s.endsWith(".jar")) {
		          traverseJar(f);
		        }
		      }
		    }
		  }

	  void traverseDir(File dir, String pkgPrefix) {
		    for (File f : dir.listFiles()) {
		      if (f.isDirectory()) {
		        String prefix = f.getName();
		        if (pkgPrefix != null) {
		          prefix = pkgPrefix + '.' + prefix;
		        }
		        traverseDir(f, prefix);
		      } else {
		        String fname = f.getName();
		        if (fname.endsWith(".class")) {
		          if (f.canRead() && (f.length() > 0)) {
		            String clsName = fname.substring(0, fname.length() - 6);
		            if (pkgPrefix != null) {
		              clsName = pkgPrefix + '.' + clsName;
		            }

		            if (isAnalyzedClass(clsName)) {
		              addClassEntry(clsName);
		            }
		          } else {
		        	  System.out.println("cannot read class file: " + fname);
		          }
		        }
		      }
		    }
		  }

		  void traverseJar(File jar) {
		    try {
		      JarFile jf = new JarFile(jar);
		      for (Enumeration<JarEntry> entries = jf.entries(); entries.hasMoreElements();) {
		        JarEntry e = entries.nextElement();
		        if (!e.isDirectory()) {
		          String eName = e.getName();
		          if (eName.endsWith(".class")) {
		            if (e.getSize() > 0) {
		              String clsName = eName.substring(0, eName.length() - 6);
		              clsName = clsName.replace('/', '.');
		              if (isAnalyzedClass(clsName)) {
		                addClassEntry(clsName);
		              }
		            } else {
		            	System.out.println("cannot read jar entry: " + eName);
		            }
		          }
		        }
		      }
		    } catch (IOException iox) {
		      iox.printStackTrace();
		    }
		  }
		  
		  void addClassEntry(String clsName) {
			    ClassCoverage cc = new ClassCoverage(clsName);
			    classes.put(clsName, cc);
			    System.out.println("added class candidate: " + clsName);
			  }

			  boolean isAnalyzedClass(String clsName) {
			    return StringSetMatcher.isMatch(clsName, includes, excludes);
			  }

			  
			  
			  //-------- the listener interface
			  public void classLoaded(JVM vm) {
			    ClassInfo ci = vm.getLastClassInfo();
			    String clsName = ci.getName();

			    if (loadedOnly) {
			      if (isAnalyzedClass(clsName)) {
			        addClassEntry(clsName);
			      }
			    }

			  /**  ClassCoverage cc = classes.get(clsName);
			    if (cc != null) {
			      cc.setLoaded(ci);
			    }**/
			  }
			  
			  
			  
			  public void stateBacktracked(Search search) {
					System.out.println("Search: " + search.getClass().toString() + " backtracked, Coverage analyzer");
			  }
			  
			  public void instructionExecuted(JVM vm) {
				    Instruction insn = vm.getLastInstruction();
			    MethodCoverage mc = getMethodCoverage(vm);

			    if (mc != null) {
			      mc.setExecuted(vm.getLastThreadInfo(), insn);

			     /** if (showRequirements) {
			        if (insn.getPosition() == 0) { // first insn in method, check for Requirements
			          AnnotationInfo ai = getRequirementsAnnotation(mc.getMethodInfo());
			          if (ai != null) {
			            String[] ids = ai.getValueAsStringArray();
			            updateRequirementsCoverage(ids, mc);
			          }
			        }
			      }**/
			    }
			  }

			  public void choiceGeneratorSet(JVM vm) {
			    /*** should be an option
			    Instruction insn = vm.getLastInstruction();
			    MethodCoverage mc = getMethodCoverage(vm);
			    mc.setCGed(vm.getLastThreadInfo(),insn);
			     ***/
			  }
			  
			  MethodInfo lastMi = null;
			  MethodCoverage lastMc = null;
			  
			  MethodCoverage getMethodCoverage(JVM vm) {
				    Instruction insn = vm.getLastInstruction();

				    if (!insn.isExtendedInstruction()) {
				      MethodInfo mi = insn.getMethodInfo();
				      if (mi != lastMi) {
				        lastMc = null;
				        lastMi = mi;
				        ClassInfo ci = mi.getClassInfo();
				        if (ci != null) {
				          ClassCoverage cc = classes.get(ci.getName());
				          if (cc != null) {
				            lastMc = cc.getMethodCoverage(mi);
				          }
				        }
				      }

				      return lastMc;
				    }

				    return null;
				  }
	  
}
