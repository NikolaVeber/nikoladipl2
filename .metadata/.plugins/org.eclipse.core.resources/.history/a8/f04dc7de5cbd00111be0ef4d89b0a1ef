package gov.nasa.jpf.symbc.sequences;

import java.util.HashMap;
import java.util.Vector;

import gov.nasa.jpf.jvm.MethodInfo;
import gov.nasa.jpf.jvm.bytecode.GOTO;
import gov.nasa.jpf.jvm.bytecode.IfInstruction;
import gov.nasa.jpf.jvm.bytecode.Instruction;
import gov.nasa.jpf.jvm.bytecode.InvokeInstruction;

public class MethodCov {
	public MethodInfo mi;
	public Instruction[] instructions;
	public Instr[] instrs;
	public HashMap<Integer, Instr> notExecutedInstructions = new HashMap<Integer, Instr> ();
	
	
	public MethodCov(MethodInfo mi) {
		this.mi = mi;
		instructions = mi.getInstructions();
		instrs = new Instr[instructions.length];
		Block lastBlock = null;
		for(int i=0; i<instructions.length; i++){
			instrs[i] = new Instr(instructions[i]);
			notExecutedInstructions.put(new Integer(i), instrs[i]);
		}
		
		for(int i=0; i<instructions.length; i++){
		// handle the block structure
			// The first instruction of the method and 	instruction of every handler for the method are	leaders.
			// Each instruction that is the target of an unconditional branch (goto, goto_w, jsr, jsr_w, and ret)	is a leader
			// Each instruction that is the target of a conditional branch 
				// (ifeq, iflt, ifle, ifne, ifgt, ifge, ifnull, ifnonnull, if_icmpeq, if_icmpne,if_icmplt, if_icmpgt, if_icmple, if_icmpge, if_acmpeq, if_acmpne, lcmp, fcmpl, fcmpg, dcmpl, dcmpg)
			 	// is a leader.
			// Each instruction that is one of the target of a	compound conditional branch (tableswitch or	lookupswitch) is a leader.
			// Each instruction that immediately follows a conditional or unconditional branch, or a <T>return	(ireturn, lreturn, freturn, dreturn, areturn,	and return), 
				// or a compound conditional branch instruction is a leader.
			// Each individual leader give rise to a basic block, consisting of all instructions up to the next leader or the end of the bytecode.

			if(i == 0) {
				lastBlock = new Block(0);
			}
			else if(instructions[i] instanceof IfInstruction){
				IfInstruction ifInsn = (IfInstruction) instructions[i];
	            Instruction tgt = ifInsn.getTarget(); // the index of instruction when if jump is taken
	            tgt = ifInsn.getNext(); // the next instruction, when if jump not taken 
			}
			else if (instructions[i] instanceof GOTO) {
	            Instruction tgt = ((GOTO) instructions[i]).getTarget();
	            //bb.set(tgt.getInstructionIndex());
	          } else if (instructions[i] instanceof InvokeInstruction) {
	            // hmm, this might be a bit too conservative, but who says we
	            // don't jump out of a caller into a handler, or even that we
	            // ever return from the call?
	            Instruction tgt = instructions[i].getNext();
	            //bb.set(tgt.getInstructionIndex());
	          }
			instrs[i].block = lastBlock;
		}
	}
	
	public void instructionExecuted(Instruction inst, Path path){
		int instId = inst.getInstructionIndex();
		if(instId < instrs.length){
			Instr i = instrs[instId];
			if(i != null){
				i.executedBy.add(path);
				i.isExecuted = true;
				notExecutedInstructions.remove(new Integer(instId));
			}
		}
	}
	
	private class Block {
		public boolean isCovered = false;
		public int firstInst;
		public int length;
		public Block(int firstInst){
			this.firstInst = firstInst;
		}
	}
	
	private class Instr {
		public Instruction insn;
		public Vector<Path> executedBy = new Vector<Path> ();
		public boolean isExecuted = false;
		public Block block; 
		
		public Instr(Instruction instruction) {
			insn = instruction;
		}
	}
}
