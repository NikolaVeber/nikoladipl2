package gov.nasa.jpf.symbc.sequences;

import java.io.File;
import java.io.IOException;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;

import gov.nasa.jpf.Config;
import gov.nasa.jpf.JPF;
import gov.nasa.jpf.jvm.ClassInfo;
import gov.nasa.jpf.report.ConsolePublisher;
import gov.nasa.jpf.report.HTMLPublisher;
import gov.nasa.jpf.symbc.sequences.CoverageAnalyzer.ClassCoverage;
import gov.nasa.jpf.symbc.sequences.CoverageAnalyzer.Coverage;
import gov.nasa.jpf.util.StringSetMatcher;

public class PathCoverageAnalyzer {
	  static class Coverage {

		    int total;
		    int covered;

		    Coverage(int total, int covered) {
		      this.total = total;
		      this.covered = covered;
		    }

		    public void add(Coverage cov) {
		      total += cov.total;
		      covered += cov.covered;
		    }

		    public int percent() {
		      if (total > 0) {
		        return covered * 100 / total;
		      }

		      return (Integer.MIN_VALUE);
		    }

		    public int covered() {
		      return covered;
		    }

		    public int total() {
		      return total;
		    }

		    public boolean isPartiallyCovered() {
		      return ((covered > 0) && (covered < total));
		    }

		    public boolean isNotCovered() {
		      return (covered == 0);
		    }

		    public boolean isFullyCovered() {
		      return (covered == total);
		    }
		  }

	  StringSetMatcher includes = null; //  means all
	  StringSetMatcher excludes = null; //  means none
	  StringSetMatcher loaded;
	  static boolean loadedOnly; // means we only check loaded classes that are not filtered
	  static boolean showMethods;      // do we want to show per-method coverage?
	  static boolean showMethodBodies;
	  static boolean excludeHandlers;  // do we count the handlers in? (off-nominal CF)
	  static boolean showBranchCoverage; // makes only sense with showMethods
	  static boolean showRequirements; // report requirements coverage
	  HashMap<String, ClassCoverage> classes = new HashMap<String, ClassCoverage>();
	  
	  
	  public PathCoverageAnalyzer(Config conf, JPF jpf) {
	      System.out.println("symbc.coverage");

	    includes = StringSetMatcher.getNonEmpty(conf.getStringArray("coverage.include"));
	    excludes = StringSetMatcher.getNonEmpty(conf.getStringArray("coverage.exclude"));

	    showMethods = conf.getBoolean("coverage.show_methods", false);
	    showMethodBodies = conf.getBoolean("coverage.show_bodies", false);
	    excludeHandlers = conf.getBoolean("coverage.exclude_handlers", false);
	    showBranchCoverage = conf.getBoolean("coverage.show_branches", true);
	    loadedOnly = conf.getBoolean("coverage.loaded_only", true);
	    showRequirements = conf.getBoolean("coverage.show_requirements", false);

	    if (!loadedOnly) {
	      getCoverageCandidates(); // this might take a little while
	    }
	  }

	  void getCoverageCandidates() {

		    // doesn't matter in which order we process this, since we
		    // just store one entry per qualified class name (i.e. there won't be
		    // multiple entries)
		    // NOTE : this doesn't yet deal with ClassLoaders, but that's also true for BCEL
		    for (String s : ClassInfo.getClassPathElements()) {
		      System.out.println("analyzing classpath element: " + s);
		      File f = new File(s);
		      if (f.exists()) {
		        if (f.isDirectory()) {
		          traverseDir(f, null);
		        } else if (s.endsWith(".jar")) {
		          traverseJar(f);
		        }
		      }
		    }
		  }

	  void traverseDir(File dir, String pkgPrefix) {
		    for (File f : dir.listFiles()) {
		      if (f.isDirectory()) {
		        String prefix = f.getName();
		        if (pkgPrefix != null) {
		          prefix = pkgPrefix + '.' + prefix;
		        }
		        traverseDir(f, prefix);
		      } else {
		        String fname = f.getName();
		        if (fname.endsWith(".class")) {
		          if (f.canRead() && (f.length() > 0)) {
		            String clsName = fname.substring(0, fname.length() - 6);
		            if (pkgPrefix != null) {
		              clsName = pkgPrefix + '.' + clsName;
		            }

		            if (isAnalyzedClass(clsName)) {
		              addClassEntry(clsName);
		            }
		          } else {
		        	  System.out.println("cannot read class file: " + fname);
		          }
		        }
		      }
		    }
		  }

		  void traverseJar(File jar) {
		    try {
		      JarFile jf = new JarFile(jar);
		      for (Enumeration<JarEntry> entries = jf.entries(); entries.hasMoreElements();) {
		        JarEntry e = entries.nextElement();
		        if (!e.isDirectory()) {
		          String eName = e.getName();
		          if (eName.endsWith(".class")) {
		            if (e.getSize() > 0) {
		              String clsName = eName.substring(0, eName.length() - 6);
		              clsName = clsName.replace('/', '.');
		              if (isAnalyzedClass(clsName)) {
		                addClassEntry(clsName);
		              }
		            } else {
		            	System.out.println("cannot read jar entry: " + eName);
		            }
		          }
		        }
		      }
		    } catch (IOException iox) {
		      iox.printStackTrace();
		    }
		  }
		  
		  void addClassEntry(String clsName) {
			    ClassCoverage cc = new ClassCoverage(clsName);
			    classes.put(clsName, cc);
			    System.out.println("added class candidate: " + clsName);
			  }

			  boolean isAnalyzedClass(String clsName) {
			    return StringSetMatcher.isMatch(clsName, includes, excludes);
			  }

	  
}
