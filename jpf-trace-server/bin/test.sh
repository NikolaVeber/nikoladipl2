#!/bin/sh
# script to test various configurations of the trace server

die () {
  echo "*** test: $*" 1>&2
  exit 1
}

# auxiliary function to shorten string in a human-readable way
shorten() {
  echo $1 | \
	sed -e \
's/\(.....\)\([A-Z]*\)[^A-Z]*\([A-Z]*\)[^A-Z]*\([A-Z]*\).*/\1\2\3\4/'
}

run () {
  if [ $# -lt 2 ]
  then
    echo
    die "Not enough parameters in test case."
  fi
  prog=$1
  expected=$2
  shift; shift
  log="`shorten $prog`"
  args=""
  while [ "$1" != "" ]
  do
    args="$args $1"
    arg="`shorten $1`"
    log="$log-$arg"
    shift
  done
  exec_eval $prog $expected $log $args
}

runts() {
  jpf=$1
  shift
  args="$jpf +shell="
  log="`echo $jpf | sed -e 's,\.\./src.*/,,' -e 's/\.jpf$//'`"
  log="`shorten $log`"
  fullarg=$1
  while [ "$fullarg" != "" ]
  do
    arg="`echo $fullarg | \
	sed -e 's/+.*\.\(.*\)\.show=false/no_\1s/' \
	-e 's/+.*\.\(.*\)=false/no_\1/'`"
    arg="`shorten $arg`"
    log="$log-$arg"
    case "$fullarg" in
      inMemory | neo4j)
      args="$args +traceServer.trace_storer=$fullarg"
      ;;
      *Analyzer)
# skip Scala-based tests if Scala not present/files not compiled
      if [ "`echo $fullarg | grep Scala`" != "" -a $scala -eq 0 ]
      then
	echo "### Skipped test of analyzer $fullarg." 1>&2
	skipped=`expr $skipped + 1`
	return
      fi
      args="$args +traceServer.trace_analyzer=gov.nasa.jpf.traceAnalyzer.$fullarg"
      ;;
      column | essential | all)
      args="$args +traceServer.trace_analyzer.params=$fullarg"
      ;;
      *TracePrinter)
      args="$args +report.publisher=$fullarg"
      ;;
      *)
      args="$args $fullarg"
      ;;
    esac
    shift
    fullarg=$1
  done
  exec_eval traceServer 0 $log $args
}

exec_eval() {
  count=`expr $count + 1`
  prog=$1
  expected=$2
  log=$3
  shift; shift; shift
  echo
  echo ./$prog.sh '\\'
  for arg in $*
  do
    echo $arg '\\'
  done
  echo "> ../log/$log.log"
  if [ $dryrun -ne 0 ]
  then
    return
  fi
  ./$prog.sh $* \
	| tr -d '\r' \
	| tr '\\' / \
	| sed -e 's,\(.*\(executenat\|nativeretu\).*\)\(java/.*\.java\):\([0-9]*\),\1\3x\4,g' \
	| grep -v 'java/.*\.java:[0-9]*' \
	| grep -v 'sun/.*\.java:[0-9]*' \
	| sed -e 's,\(.*\(executenat\|nativeretu\).*\)\(java/.*\.\)\(javax\),\1\3\java,g' \
	| sed \
	-e 's,[0-9][0-9]*/[0-9][0-9]*/[0-9][0-9]* [0-9][0-9]*:[0-9][0-9].*,,' \
	-e 's,\(time:[	 ]*\)0:[0-9][0-9]:[0-9][0-9],\10:00:00,' \
	-e 's,\(time:[	 ]*\)[0-9][0-9]*,\10,' \
	-e 's,if[a-z_]* [0-9][0-9]*,,' \
	-e 's,goto [0-9][0-9]*,,' \
	> ../log/$log.log
# remove MS-DOS \r
# change \ to /
# remove part of trace output relating to Java libraries,
# as this part changes between different revisions of Java
# also filter out time stamps
  res=$?
  if [ $res = $expected ]
  then
    diffcmd="diff ../log/$log.log ../log/$log.out"
    $diffcmd >/dev/null 2>/dev/null
    if [ $? = 0 ]
    then
      echo "# ok"
      ok=`expr $ok + 1`
    else
      echo
      echo "# Output difference: " >& 2
      echo "$diffcmd" >& 2
      failed=`expr $failed + 1`
    fi
  else 
    echo
    echo "# Unexpected exit code: $res" >& 2
    failed=`expr $failed + 1`
  fi
}

crosscmp() {
# cross-compare log files generated by inMemory DB with
# log files generated when using neo4j; they should be equal.
  for F in ../log/*-inMem-*.log
  do
    N="`echo $F | sed -e 's/inMem/neo4j/'`"
    if [ -e $N ]
    then
      count=`expr $count + 1`
      echo
      diffcmd="diff $F $N"
      echo $diffcmd
      if [ $dryrun -eq 0 ]
      then
        $diffcmd >/dev/null 2>/dev/null
        if [ $? -eq 0 ]
        then
          echo "# ok"
          ok=`expr $ok + 1`
        else
  	echo "# Output difference" >& 2
          failed=`expr $failed + 1`
        fi
      fi
    fi
  done
}

count=0
failed=0
ok=0
dryrun=0
skipped=0
scala=0

if [ $# -gt 0 ]
then
	if [ $1="-n" ]
	then
		dryrun=1
	fi
fi

# check for presence of Scala-compiled files
if [ -e ../build/scala/gov/nasa/jpf/traceServer/scala/printer -a \
	"`ls ../build/scala/gov/nasa/jpf/traceServer/scala/printer/ 2>/dev/null | wc -l`" != "0" ]
then
	scala=1
fi

runts ../src/examples/genericAnalyzers.jpf \
    +listener=gov.nasa.jpf.traceEmitter.DeadlockAnalyzerEmitter \
	inMemory ScalaDeadlockAnalyzer essential

runts ../src/examples/genericAnalyzers.jpf \
    +listener=gov.nasa.jpf.traceEmitter.DeadlockAnalyzerEmitter \
	inMemory ScalaDeadlockAnalyzer column	

runts ../src/examples/genericAnalyzers.jpf \
	+listener=gov.nasa.jpf.traceEmitter.DefaultTraceEmitter \
	neo4j

run genericOutputExecTrackerAnalyzer 0 neo4j 0
run genericOutputExecTrackerAnalyzer 0 neo4j 1
run genericOutputExecTrackerAnalyzer 0 neo4j 10

runts ../src/examples/genericAnalyzers.jpf \
    +listener=gov.nasa.jpf.traceEmitter.DefaultTraceEmitter \
	inMemory GenericOutputExecTrackerAnalyzer \
	+traceServer.trace_analyzer.params=inMemory,dbTrace,0
	
runts ../src/examples/genericAnalyzers.jpf \
    +listener=gov.nasa.jpf.traceEmitter.DefaultTraceEmitter \
	+traceServer.trace_analyzer.params=inMemory,dbTrace,1 \
	inMemory GenericOutputExecTrackerAnalyzer
	
runts ../src/examples/genericAnalyzers.jpf \
    +traceServer.trace_analyzer.params=inMemory,dbTrace,10 \
    +listener=gov.nasa.jpf.traceEmitter.DefaultTraceEmitter \
	inMemory GenericOutputExecTrackerAnalyzer

runts ../src/examples/genericAnalyzers.jpf \
	+listener=gov.nasa.jpf.traceEmitter.DeadlockAnalyzerEmitter \
	neo4j

run genericOutputDeadlockAnalyzer 0 neo4j column
run genericOutputDeadlockAnalyzer 0 neo4j essential

runts ../src/examples/genericAnalyzers.jpf \
    +listener=gov.nasa.jpf.traceEmitter.DeadlockAnalyzerEmitter \
	inMemory GenericOutputDeadlockAnalyzer column

runts ../src/examples/genericAnalyzers.jpf \
    +listener=gov.nasa.jpf.traceEmitter.DeadlockAnalyzerEmitter \
	inMemory GenericOutputDeadlockAnalyzer essential

runts ../src/examples/genericAnalyzers.jpf \
	neo4j

run genericOutputMethodAnalyzer 0 neo4j all
run genericOutputMethodAnalyzer 0 neo4j essential

runts ../src/examples/genericAnalyzers.jpf \
	inMemory GenericOutputMethodAnalyzer all
	
runts ../src/examples/genericAnalyzers.jpf \
	inMemory GenericOutputMethodAnalyzer essential	

runts ../src/examples/deadlockAnalyzerEmitter.jpf \
	inMemory DeadlockAnalyzer essential
	
runts ../src/examples/deadlockAnalyzerEmitter.jpf \
	inMemory DeadlockAnalyzer column

runts ../src/examples/deadlockAnalyzerEmitter.jpf \
	inMemory DeadlockAnalyzer all
	
runts ../src/examples/methodAnalyzerEmitter.jpf \
	inMemory MethodAnalyzer
	
runts ../src/examples/methodAnalyzerEmitter.jpf \
	inMemory OverlappingMethodAnalyzer
	
runts ../src/examples/deadlockAnalyzerEmitter.jpf \
	neo4j

run deadlockAnalyzer 0 neo4j column
run deadlockAnalyzer 0 neo4j essential
run deadlockAnalyzer 0 neo4j all

runts ../src/examples/methodAnalyzerEmitter.jpf

run methodAnalyzer 0 neo4j
run overlappingMethodAnalyzer 0 neo4j

# console printer that mimics JPF's default printer
runts ../src/examples/defaultEmitterWithPrinter.jpf \
	inMemory consoleTracePrinter
	
runts ../src/examples/defaultEmitterWithPrinter.jpf \
	neo4j consoleTracePrinter

# prints instruction, object and thread events	
runts ../src/examples/defaultEmitterWithPrinter.jpf \
	inMemory genericConsoleTracePrinter
	
runts ../src/examples/defaultEmitterWithPrinter.jpf \
	neo4j genericConsoleTracePrinter

# prints object and thread events only	
runts ../src/examples/defaultEmitterWithPrinter.jpf \
	inMemory genericConsoleTracePrinter \
	+traceServer.tracePrinter.instruction.show=false
		
runts ../src/examples/defaultEmitterWithPrinter.jpf \
	neo4j genericConsoleTracePrinter \
	+traceServer.tracePrinter.instruction.show=false	

# prints instruction events only	
runts ../src/examples/defaultEmitterWithPrinter.jpf \
	inMemory genericConsoleTracePrinter \
	+traceServer.tracePrinter.object.show=false \
	+traceServer.tracePrinter.thread.show=false
	
runts ../src/examples/defaultEmitterWithPrinter.jpf \
	neo4j genericConsoleTracePrinter \
	+traceServer.tracePrinter.object.show=false \
	+traceServer.tracePrinter.thread.show=false				
	
# prints instruction, object and thread events
# instruction events are augmented with method args where exists
# and object events with initialization location 
runts ../src/examples/extraDataEmitter.jpf \
	inMemory genericConsoleTracePrinter
	
runts ../src/examples/extraDataEmitter.jpf \
	neo4j genericConsoleTracePrinter

# prints instruction, object and thread events
# instruction events are augmented with method args where they exists
# extra trace data are not printed for object events
runts ../src/examples/extraDataEmitter.jpf \
	inMemory genericConsoleTracePrinter \
	+traceServer.tracePrinter.object.printExtraData=false
	
runts ../src/examples/extraDataEmitter.jpf \
	neo4j genericConsoleTracePrinter \
	+traceServer.tracePrinter.object.printExtraData=false	
	
# console printer that mimics JPF's default printer
# augmented with method args where they exists and
# reference of a newly created object
runts ../src/examples/extraDataEmitter.jpf \
	inMemory consoleTracePrinter \

runts ../src/examples/extraDataEmitter.jpf \
	neo4j consoleTracePrinter \
	
# console printer that mimics JPF's default printer
# extra data are not printed
runts ../src/examples/extraDataEmitter.jpf \
	inMemory consoleTracePrinter \
	+report.consoleTracePrinter.show_extra_data=false
	
runts ../src/examples/extraDataEmitter.jpf \
	neo4j consoleTracePrinter \
	+report.consoleTracePrinter.show_extra_data=false	
	
# console printer that mimics JPF's default printer
# runs with defaults
runts ../src/examples/printerWithDefaults.jpf \
	inMemory consoleTracePrinter
	
runts ../src/examples/printerWithDefaults.jpf \
	neo4j consoleTracePrinter	
	
# console printer that mimics JPF's default printer
# runs with defaults
runts ../src/examples/printerWithDefaults.jpf \
	inMemory genericConsoleTracePrinter				

runts ../src/examples/printerWithDefaults.jpf \
	neo4j genericConsoleTracePrinter
	
# TracePrinter configured with default event printers.
# All printers are ON.	
runts ../src/examples/printerWithDefaults.jpf \
	inMemory ExecTrackerAnalyzer \
	+traceServer.trace_analyzer.params=all \
	+report.console.property_violation=
	
run execTrackerAnalyzer 0 neo4j	
	
# System.out.println arg captured and printed
# per trace by using new event property
runts ../src/examples/outputEmitter.jpf \
	inMemory	
	
runts ../src/examples/outputEmitter.jpf \
	neo4j
	
# System.out.println arg captured and printed
# per trace by using TRACE_EXTRA_DATA property
runts ../src/examples/outputEmitter.jpf \
	inMemory \
	+listener=gov.nasa.jpf.traceServer.extensions.OutputEmitterWithExtraTraceData \
	+traceServer.tracePrinter.method.class=gov.nasa.jpf.traceServer.extensions.MethodPrinterWithExtraTraceData	
	
runts ../src/examples/outputEmitter.jpf \
	neo4j \
	+listener=gov.nasa.jpf.traceServer.extensions.OutputEmitterWithExtraTraceData \
	+traceServer.tracePrinter.method.class=gov.nasa.jpf.traceServer.extensions.MethodPrinterWithExtraTraceData						

# System.out.println arg captured and printed
# per trace by using invoke instructions,
# and filter to filter out uninteresting events
# i.e. calls to other methods
runts ../src/examples/outputEmitterWithFilter.jpf \
	inMemory 	
	
runts ../src/examples/outputEmitterWithFilter.jpf \
	neo4j 

# emitter collects instructions
# console printer prints error trace with those events	
runts ../src/examples/extendedDeadlockAnalyzerEmitter.jpf \
	inMemory DeadlockAnalyzer essential	

# cross-compare test outputs

echo
echo "# Cross-comparing inMemory and neo4j outputs..."
crosscmp
echo
if [ $dryrun -ne 0 ]
then
	echo "# count=$count"
	exit 0
fi
echo "# count=$count ok=$ok failed=$failed skipped=$skipped"
